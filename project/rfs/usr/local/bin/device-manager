#!/bin/bash

export PATH=/usr/local/sbin:/usr/local/bin:/usr/sbin:/usr/bin:/sbin:/bin

#====LIBRARY========

function _system_exit() {
	echo "$@"
	exit
}

function _shell_get_parameter() {
	name=$1
	shift
	for item in "$@"
	do
		key=${item%%=*}
		value=${item#*=}
		[ "$key" = "$name" ] && echo "$value"
		[ "$key" = "$name" ] && break
	done
}

function _shell_get_parameters() {
	name=$1
	shift
	for item in "$@"
	do
		key=${item%%=*}
		value=${item#*=}
		[ "$key" = "$name" ] && echo "$value"
	done
}

function _file_backup() {
	[ -z "$1" ] && return
	[ -e "$1" ] || return
	[ -e "$1.backup" ] && return
	cp $1 $1.backup
}

function _string_assert_contains() {
	value=$1
	shift
	for item in "$@"
	do
		[ "$value" = "$item" ] && return 0
	done
	return 1
}

function _string_assert_number() {
	echo "$1" | grep -q "^[0-9]*$" && return 0
	return 1
}

function _string_assert_empty() {
	[ -z "$1" ] || return 0
	return 1
}

function _network_assert_interface() {
	[ -z "$1" ] && return 1
	[ -e /sys/class/net/$1 ] && return 0
	return 1
}

function _network_assert_address() {
	[ -z "$1" ] && return 1
	ipcalc -n $1 | grep -q INVALID && return 1
	return 0
}

function _network_reset_interface() {
	ps -ax -o pid,args | grep -w wpa_supplicant | grep $1 | awk '{print $1}' | xargs --no-run-if-empty kill
	ps -ax -o pid,args | grep -w hostapd | grep $1 | awk '{print $1}' | xargs --no-run-if-empty kill
	ps -ax -o pid,args | grep -w dhclient | grep $1 | awk '{print $1}' | xargs --no-run-if-empty kill
	sleep 3
}

function _network_set_address() {
	ip address flush dev $1
	if [ "$2" = "dhcp" ]
	then
		/sbin/dhclient -1 -v -pf /run/dhclient.$1.pid -lf /var/lib/dhcp/dhclient.$1.leases $1
	else
		ip address add $2 dev $1
	fi
	if [ -n "$3" ]
	then
		ip route | grep default | awk '{print $3}' | xargs --no-run-if-empty ip route del default via
		ip route add default via $3
	fi
}

function _network_get_address() {
	ip addr show dev $1 | grep -o '[0-9]*\.[0-9]*\.[0-9]*\.[0-9]*/[0-9]*'
}

function _network_get_gateway() {
	ip route show dev $1 | grep default | grep -o '[0-9]*\.[0-9]*\.[0-9]*\.[0-9]*'
}

function _network_get_subnet() {
	ipcalc -b $1 2>/dev/null | grep Network | awk '{print $2}' | cut -d / -f 1
}

function _network_get_netmask() {
	ipcalc -b $1 2>/dev/null | grep Netmask | awk '{print $2}'
}

function _network_get_subnet_min() {
	ipcalc -b $1 2>/dev/null | grep HostMin | awk '{print $2}'
}

function _network_get_subnet_max() {
	ipcalc -b $1 2>/dev/null | grep HostMax | awk '{print $2}'
}

function _network_get_nameservers() {
	cat /etc/resolv.conf | grep "^nameserver" | grep -o '[0-9]*\.[0-9]*\.[0-9]*\.[0-9]*' |  sort -u 
}

#====LIBRARY========

function _help() {
	echo "device-manager network wireless hotspot --interface=<interface> --device=<nl80211|wext|wired|none> --ssid=<ssid> --password=[password] --address=<address/netmask>"
	echo "device-manager network wireless station --interface=<interface> --device=<nl80211|wext|wired|none> --ssid=<ssid> --password=[password] --address=<address/netmask> --gateway=[gateway]"
	echo "device-manager network wireless scan --interface=<interface> --device=<nl80211|wext|wired|none>"
	echo "device-manager network wired --interface=<interface> --address=<address/netmask> --gateway=[gateway]"
	echo "device-manager network resolv --name-server=<server> ..."
	echo "device-manager network forward --type=<dynamic|left|right> --server-host=<server> --server-port=<port> --username=<username> --password=<password> --local-port=<port> --remote-port=<port> --deamon"
	echo "device-manager service dhcpd --interfaces=<interfaces> --<interface>-filter=<allow|deny> --<interface>-hosts=<hosts> --<interface>-pxe --<interface>-pac"
	echo "device-manager service pdnsd --server=<server> ..."
	echo "device-manager service samba list --details"
	echo "device-manager service samba create --name=<name> --comment=<comment> --path=<path> --browseable=<yes|no> --writable=<yes|no>"
	echo "device-manager service samba delete --name=<name>"
	echo "device-manager service samba reload"
	echo "device-manager service samba user <create|delete|enable|disable|password> --name=<username>"
	echo "device-manager service route --forward=<nic:address/netmask> ..."
	echo "device-manager service pxe list --details"
	echo "device-manager service pxe create --name=<name> --label=<comment> --kernel=<kernel> --initrd=<initrd> --append=<append>"
	echo "device-manager service pxe delete --name=<name>"
	echo "device-manager service pxe reload"
	echo "device-manager busybox httpd --port=<address:port> --home=<home>"
}

function _main() {
	command="$1"
	shift
	case "$command" in
		network)
			_network "$@"
		;;
		service)
			_service "$@"
		;;
		busybox)
			_busybox "$@"
		;;
		*)
			_help
		;;
	esac
}

function _busybox() {
	command="$1"
	shift
	case "$command" in
		httpd)
			_busybox_httpd "$@"
		;;
		*)
			_help | grep busybox
		;;
	esac	
}

function _busybox_httpd() {
	port=$(_shell_get_parameters --port $@)
	_string_assert_empty "$port" || _system_exit "port is empty"
	home=$(_shell_get_parameters --home $@)
	[ -z "$home" ] && home=/var/www/html/
	[ -e "$home" ] || _system_exit "$home does not exist"
	[ -d "$home" ] || _system_exit "$home not is directorty"
	busybox httpd -p $port -h $home -c /usr/local/etc/httpd.conf
}

function _service() {
	command="$1"
	shift
	case "$command" in
		dhcpd)
			_service_dhcpd "$@"
		;;
		pdnsd)
			_service_pdnsd "$@"
		;;
		samba)
			_service_samba "$@"
		;;
		route)
			_service_route "$@"
		;;
		pxe)
			_service_pxe "$@"
		;;
		*)
			_help | grep service
		;;
	esac
}

function _service_route() {
	/sbin/iptables-save | grep POSTROUTING | grep MASQUERADE | sed 's/^-A/iptables -t nat -D/' | bash
	for forward in $(_shell_get_parameters --forward $@)
	do
		[ -z "$forward" ] && continue
		interface=$(echo $forward | cut -d : -f 1)
		address=$(echo $forward | cut -d : -f 2)
		_network_assert_interface $interface || _system_exit "interface error: $interface"
		_network_assert_address $address || _system_exit "address error: $address"
		iptables -t nat -A POSTROUTING -s $address -o $interface -j MASQUERADE
	done
}

function _service_pxe() {
	command="$1"
	shift
	source /etc/default/tftpd-hpa
	case "$command" in
		list)
			_service_pxe_list "$@"
		;;
		create)
			_service_pxe_create "$@"
		;;
		delete)
			_service_pxe_delete "$@"
		;;
		reload)
			_service_pxe_reload
		;;
		*)
			_help | grep service | grep pxe
		;;
	esac
}
function _service_pxe_list() {
	[ -e $TFTP_DIRECTORY/boot ] || return
	if _string_assert_contains --details "$@"
	then
		cat $TFTP_DIRECTORY/boot/*.pxe 2>/dev/null
	else
		ls $TFTP_DIRECTORY/boot/*.pxe  2>/dev/null
	fi
}

function _service_pxe_create() {
	name=$(_shell_get_parameter --name "$@")
	_string_assert_empty "$name" || _system_exit "name is empty"
	[ -e $TFTP_DIRECTORY/boot/$name.pxe ] && _system_exit "$name already exists"
	label=$(_shell_get_parameter --label "$@")
	[ -z "$label" ] && label="$name"
	kernel=$(_shell_get_parameter --kernel "$@")
	_string_assert_empty "$kernel" || kernel="/usr/lib/syslinux/memdisk"
	[ -e $kernel ] || _system_exit "$kernel does not exist"
	initrd=$(_shell_get_parameter --initrd "$@")
	_string_assert_empty "$initrd" || _system_exit "initrd is empty"
	[ -e $initrd ] || _system_exit "$initrd does not exist"
	append=$(_shell_get_parameter --append "$@")
	mkdir -p $TFTP_DIRECTORY/boot
	cp $kernel $TFTP_DIRECTORY/boot/$name.kernel
	cp $initrd $TFTP_DIRECTORY/boot/$name.initrd
	cat >$TFTP_DIRECTORY/boot/$name.pxe<<-EOF
	LABEL $name
	MENU LABEL $label
	kernel boot/$name.kernel
	initrd boot/$name.initrd
	append $append
	EOF
}

function _service_pxe_delete() {
	name=$(_shell_get_parameter --name "$@")
	_string_assert_empty "$name" || _system_exit "name is empty"
	rm -rf $TFTP_DIRECTORY/boot/$name.*
}

function _service_pxe_reload() {
	[ -e $TFTP_DIRECTORY/pxelinux.0 ] || cp /usr/lib/PXELINUX/pxelinux.0 $TFTP_DIRECTORY/
	[ -e $TFTP_DIRECTORY/libutil.c32 ] || cp /usr/lib/syslinux/modules/bios/libutil.c32 $TFTP_DIRECTORY/
	[ -e $TFTP_DIRECTORY/ldlinux.c32 ] || cp /usr/lib/syslinux/modules/bios/ldlinux.c32 $TFTP_DIRECTORY/
	[ -e $TFTP_DIRECTORY/libcom32.c32 ] || cp /usr/lib/syslinux/modules/bios/libcom32.c32 $TFTP_DIRECTORY/
	[ -e $TFTP_DIRECTORY/vesamenu.c32 ] || cp /usr/lib/syslinux/modules/bios/vesamenu.c32 $TFTP_DIRECTORY/
	mkdir -p $TFTP_DIRECTORY/pxelinux.cfg
	cat >$TFTP_DIRECTORY/pxelinux.cfg/default<<-EOF
	DEFAULT vesamenu.c32
	TIMEOUT 100
	PROMPT 0
	MENU TITLE Daniel PXE loader
	MENU COLOR BORDER 0 #0000 #0000 none
	EOF
	cat $TFTP_DIRECTORY/boot/*.pxe 2>/dev/null >>$TFTP_DIRECTORY/pxelinux.cfg/default
}

function _service_samba() {
	command="$1"
	shift
	case "$command" in
		list)
			_service_samba_list "$@"
		;;
		create)
			_service_samba_create "$@"
		;;
		delete)
			_service_samba_delete "$@"
		;;
		reload)
			_service_samba_reload
		;;
		user)
			_service_samba_user "$@"
		;;
		*)
			_help | grep service | grep samba
		;;
	esac
}

function _service_pdnsd() {
	temp=$(mktemp)
	_network_get_nameservers >$temp
	_shell_get_parameters --server "$@" >>$temp
	servers=$(cat $temp | grep -o '[0-9]*\.[0-9]*\.[0-9]*\.[0-9]*' | grep -v "^127" |  sort -u | xargs echo | tr ' ' ',')
	[ -z "$servers" ] && servers="114.114.114.114"
	cat >/usr/local/etc/pdnsd.conf<<-EOF
	global {
	debug = on;
	perm_cache = 1024;
	cache_dir = /var/pdnsd;
	server_port = 53;
	server_ip = any;
	status_ctl = on;
	min_ttl = 15m;
	max_ttl = 1w;
	timeout = 10;
	}

	server {
		label = $(hostname);
		ip = $servers;
		root_server = on;
		uptest = none;
	}

	source {
		owner = localhost;
		file = /etc/hosts;
	}

	rr {
		name = localhost;
		reverse = on;
		a = 127.0.0.1;
		owner = localhost;
		soa = localhost,root.localhost,42,86400,900,86400,86400;
	}
	EOF
	echo "nameserver 127.0.0.1" >/etc/resolv.conf
	pkill pdnsd
	/usr/local/sbin/pdnsd -c /usr/local/etc/pdnsd.conf -d
}

function _service_samba_list() {
	[ -e /etc/samba/smb.conf.d ] || return
	if _string_assert_contains --details "$@"
	then
		cat /etc/samba/smb.conf.d/* 2>/dev/null
	else
		ls /etc/samba/smb.conf.d/*  2>/dev/null
	fi
}

function _service_samba_create() {
	name=$(_shell_get_parameter --name "$@")
	_string_assert_empty "$name" || _system_exit "name is empty"
	[ -e /etc/samba/smb.conf.d/$name ] && _system_exit "$name already exists"
	path=$(_shell_get_parameter --path "$@")
	_string_assert_empty "$path" || _system_exit "path is empty"
	[ -e $path ] || _system_exit "$path does not exist"
	[ -d $path ] || _system_exit "$path not is directorty"
	path=$(readlink -f $path)
	comment=$(_shell_get_parameter --comment "$@")
	[ -z "$comment" ] && comment="Shared $path"
	browseable=$(_shell_get_parameter --browseable "$@")
	[ -z "$browseable" ] && browseable=yes
	_string_assert_contains $browseable yes no || _system_exit "browseable error: $browseable"
	writable=$(_shell_get_parameter --writable "$@")
	[ -z "$writable" ] && writable=yes
	_string_assert_contains $writable yes no || _system_exit "writable error: $writable"
	mkdir -p /etc/samba/smb.conf.d
	cat >/etc/samba/smb.conf.d/$name<<-EOF
	[$name]
	    comment = $comment
	    path = $path
	    browseable = $browseable
	    writable = $writable
	EOF
}

function _service_samba_delete() {
	name=$(_shell_get_parameter --name "$@")
	_string_assert_empty "$name" || _system_exit "name is empty"
	rm -rf /etc/samba/smb.conf.d/$name
}

function _service_samba_reload() {
	_file_backup /etc/samba/smb.conf
	cat >/etc/samba/smb.conf<<-EOF
	[global]
	   workgroup = WORKGROUP
	   dns proxy = no
	   log file = /var/log/samba/log.%m
	   max log size = 1000
	   syslog = 0
	   panic action = /usr/share/samba/panic-action %d
	   server role = standalone server
	   passdb backend = tdbsam
	   obey pam restrictions = yes
	   unix password sync = yes
	   passwd program = /usr/bin/passwd %u
	   passwd chat = *Enter\snew\s*\spassword:* %n\n *Retype\snew\s*\spassword:* %n\n *password\supdated\ssuccessfully* .
	   pam password change = yes
	   map to guest = bad user
	   usershare allow guests = yes
	[homes]
	   comment = Home Directories
	   browseable = no
	   read only = yes
	   create mask = 0700
	   directory mask = 0700
	   valid users = %S
	[printers]
	   comment = All Printers
	   browseable = no
	   path = /var/spool/samba
	   printable = yes
	   guest ok = no
	   read only = yes
	   create mask = 0700
	[print$]
	   comment = Printer Drivers
	   path = /var/lib/samba/printers
	   browseable = yes
	   read only = yes
	   guest ok = no
	EOF
	cat /etc/samba/smb.conf.d/* 2>/dev/null >>/etc/samba/smb.conf
	/etc/init.d/samba restart
}

function _service_samba_user() {
	name=$(_shell_get_parameter --name "$@")
	_string_assert_empty "$name" || _system_exit "name is empty"
	command="$1"
	shift
	case "$command" in
		create)
			password=name=$(_shell_get_parameter --password "$@")
			if [ -z "$password" ]
			then
				smbpasswd -a $name
			else
				(echo "$password"; echo "$password") | smbpasswd -s -a $name
			fi
		;;
		delete)
			smbpasswd -x $name
		;;
		enable)
			smbpasswd -e $name
		;;
		disable)
			smbpasswd -d $name
		;;
		password)
			password=name=$(_shell_get_parameter --password "$@")
			if [ -z "$password" ]
			then
				smbpasswd $name
			else
				(echo "$password"; echo "$password") | smbpasswd -s $name
			fi
		;;
		*)
			_help | grep service | grep samba | grep user
		;;
	esac
}

function _service_dhcpd() {
	interfaces=$(_shell_get_parameters --interfaces $@ | tr ',' '\n' | tr -d ' ' | grep -v '^$' | sort -u | xargs echo)
	for item in $interfaces
	do
		_network_assert_interface $item || _system_exit "interface error: $item"
	done
	_file_backup /etc/default/isc-dhcp-server
	echo "INTERFACE=\"$interfaces\"" > /etc/default/isc-dhcp-server

	_file_backup /etc/dhcp/dhcpd.conf
	cat >/etc/dhcp/dhcpd.conf<<-EOF
	ddns-update-style none;
	default-lease-time 600;
	max-lease-time 7200;
	log-facility local7;
	option proxy-config code 252 = text;
	EOF

	for nic in $interfaces
	do
		address=$(_network_get_address $nic | cut -d / -f 1)
		gateway=$(_network_get_gateway $nic)
		subnet=$(_network_get_subnet $address)
		netmask=$(_network_get_netmask $address)
		dns=$(_network_get_nameservers | xargs echo | tr ' ' ',' | sed "s/127.[0-9]*.[0-9]*.[0-9]*/$address/g")
		filter=$(_shell_get_parameter --$nic-filter $@)
		hosts=$(_shell_get_parameter --$nic-hosts $@)
		start=$(_network_get_subnet_min $address)
		end=$(_network_get_subnet_max $address)
		[ -z "$gateway" ] && gateway=$address
		[ -z "$hosts" ] && filter=""
		for host in $(echo "$hosts" | tr '[A-F]' '[a-f]' | tr ',' ' ')
		do
			class="$nic-$(echo $host | tr -d :)"
			echo "class \"$class\"  { match if substring(hardware,1,6) = $host; }"
		done
		echo -e "subnet $subnet netmask $netmask {"
		echo -e "\toption subnet-mask $netmask;"
		echo -e "\toption routers $gateway;"
		echo -e "\toption domain-name \"snail.org.cn\";"
		echo -e "\toption domain-name-servers $dns;"
		_string_assert_contains --$nic-pxe $@ && echo -e "\toption bootfile-name \"pxelinux.0\";"
		_string_assert_contains --$nic-pxe $@ && echo -e "\tnext-Server $address;"
		_string_assert_contains --$nic-pac $@ && echo -e "\toption proxy-config \"http://$address/cgi-bin/proxy.cgi?$address\";"
		echo -e "\tpool {"
		echo  -e "\t\trange $start $end;"
		for host in $(echo "$hosts" | tr ',' ' ')
		do
			class="$nic-$(echo $host | tr -d :)"
			[ "$filter" = "deny" ] && echo -e "\t\tdeny members of \"$class\";"
			[ "$filter" = "allow" ] && echo  -e "\t\tallow members of \"$class\";"
		done
		echo -e "\t}"
		echo -e "}"
	done >> /etc/dhcp/dhcpd.conf
	/etc/init.d/isc-dhcp-server restart
}

function _network() {
	command="$1"
	shift
	case "$command" in
		wireless)
			_network_wireless "$@"
		;;
		wired)
			_network_wired "$@"
		;;
		resolv)
			_network_resolv "$@"
		;;
		forward)
			_network_forward "$@"
		;;
		*)
			_help | grep network
		;;
	esac
}

function _network_forward() {
	type=$(_shell_get_parameter --type "$@")
	_string_assert_empty "$type" || _system_exit "username is empty"
	_string_assert_contains $type dynamic left right || _system_exit "type error: $type"
	username=$(_shell_get_parameter --username "$@")
	[ -z "$username" ] && username=$USER
	_string_assert_empty "$username" || _system_exit "username is empty"
	password=$(_shell_get_parameter --password "$@")
	[ -z "$password" ] && (read -s -p 'input password: ' password; echo)
	_string_assert_empty "$password" || _system_exit "password is empty"
	server_host=$(_shell_get_parameter --server-host "$@")
	_string_assert_empty "$server_host" || _system_exit "server host is empty"
	server_port=$(_shell_get_parameter --server-port "$@")
	[ -z "$server_port" ] && server_port=22
	_string_assert_number "$server_port" || _system_exit "server port error: $server_port"
	local_port=$(_shell_get_parameter --local-port "$@")
	_string_assert_empty "$local_port" || _system_exit "local port is empty"
	_string_assert_number "$local_port" || _system_exit "local port error: $local_port"
	options="-o ServerAliveInterval=30 -o ServerAliveCountMax=5 -o TCPKeepAlive=yes -o StrictHostKeyChecking=no"
	while true
	do
		case "$type" in
			dynamic)
				sshpass -p "$password" ssh $options -N -T -D 0.0.0.0:$local_port -C $username@$server_host -p $server_port
			;;
			left)
				remote_port=$(_shell_get_parameter --remote-port "$@")
				_string_assert_empty "$remote_port" || _system_exit "remote port is empty"
				_string_assert_number "$remote_port" || _system_exit "remote port error: $remote_port"
				sshpass -p "$password" ssh $options -N -T -L $local_port:localhost:$remote_port $username@$server_host -p $server_port
			;;
			right)
				remote_port=$(_shell_get_parameter --remote-port "$@")
				_string_assert_empty "$remote_port" || _system_exit "remote port is empty"
				_string_assert_number "$remote_port" || _system_exit "remote port error: $remote_port"
				sshpass -p "$password" ssh $options -N -T -R $remote_port:localhost:$local_port $username@$server_host -p $server_port
			;;
		esac
		_string_assert_contains --deamon $@ || break
		echo "retry ..."
		sleep 5
	done
}

function _network_resolv() {
	_shell_get_parameters --name-server $@ | xargs -i echo nameserver {} > /etc/resolv.conf
}

function _network_wired() {
	interface=$(_shell_get_parameter --interface $@)
	address=$(_shell_get_parameter --address $@)
	gateway=$(_shell_get_parameter --gateway $@)

	_string_assert_empty "$interface" || _system_exit "interface is empty"
	_network_assert_interface $interface  || _system_exit "interface error: $interface"

	if [ "$address" = "dhcp" ]
	then
		_network_set_address $interface $address
	else
		_string_assert_empty "$address" || _system_exit "address is empty"
		_network_assert_address $address || _system_exit "address error: $address"
		_network_set_address $interface $address $gateway
	fi
}

function _network_wireless() {
	command="$1"
	shift
	case "$command" in
		hotspot)
			_network_wireless_hotspot "$@"
		;;
		station)
			_network_wireless_station "$@"
		;;
		scan)
			_network_wireless_scan "$@"
		;;
		*)
			_help | grep network | grep wireless
		;;
	esac
}

function _network_wireless_scan() {
	interface=$(_shell_get_parameter --interface $@)
	device=$(_shell_get_parameter --device $@)

	cfg=/tmp/wpa_supplicant-$interface.conf
	pid=/tmp/wpa_supplicant-$interface.pid
	touch $cfg

	_string_assert_empty "$interface" || _system_exit "interface is empty"
	_network_assert_interface $interface  || _system_exit "interface error: $interface"
	_string_assert_empty "$device" || _system_exit "device is empty"
	_string_assert_contains $device nl80211 wext wired none || _system_exit "device error: $device"

	_network_reset_interface $interface

	wpa_supplicant -B -D$device -i$interface -c$cfg -C$pid
	wpa_cli -i$interface -p$pid scan &> /dev/null
	sleep 5
	wpa_cli -i$interface -p$pid scan_result | grep -v "^bssid" | awk '{printf("%2d) %-16s\t%s\t%s\t%s\t%s\n", NR, $5, $1, $2, $3, $4)}'

	_network_reset_interface $interface
}

function _network_wireless_hotspot() {
	interface=$(_shell_get_parameter --interface $@)
	device=$(_shell_get_parameter --device $@)
	ssid=$(_shell_get_parameter --ssid $@)
	password=$(_shell_get_parameter --password $@)
	address=$(_shell_get_parameter --address $@)

	cfg=/tmp/hostapd-$interface.conf
	pid=/tmp/hostapd-$interface.pid

	_string_assert_empty "$interface" || _system_exit "interface is empty"
	_network_assert_interface $interface  || _system_exit "interface error: $interface"
	_string_assert_empty "$device" || _system_exit "device is empty"
	_string_assert_contains $device nl80211 wext wired none || _system_exit "device error: $device"
	_string_assert_empty "$address" || _system_exit "address is empty"
	_network_assert_address $address || _system_exit "address error: $address"

	_network_reset_interface $interface

	cat >$cfg<<-EOF
	interface=$interface
	macaddr_acl=0
	auth_algs=1
	driver=$device
	hw_mode=g
	ieee80211n=1
	channel=1
	ssid=$ssid
	ignore_broadcast_ssid=0
	EOF

	if [ -n "$password" ]
	then
		echo wpa=3 >> $cfg
		echo wpa_passphrase=$password >> $cfg
		echo wpa_key_mgmt=WPA-PSK >> $cfg
		echo wpa_pairwise=TKIP >> $cfg
		echo rsn_pairwise=CCMP >> $cfg
	fi

	hostapd -B -P $pid $cfg

	_network_set_address $interface $address
}

function _network_wireless_station() {
	interface=$(_shell_get_parameter --interface $@)
	device=$(_shell_get_parameter --device $@)
	ssid=$(_shell_get_parameter --ssid $@)
	password=$(_shell_get_parameter --password $@)
	address=$(_shell_get_parameter --address $@)
	gateway=$(_shell_get_parameter --gateway $@)

	cfg=/tmp/wpa_supplicant-$interface.conf
	pid=/tmp/wpa_supplicant-$interface.pid
	touch $cfg

	_string_assert_empty "$interface" || _system_exit "interface is empty"
	_network_assert_interface $interface  || _system_exit "interface error: $interface"
	_string_assert_empty "$device" || _system_exit "device is empty"
	_string_assert_contains $device nl80211 wext wired none || _system_exit "device error: $device"
	_string_assert_empty "$address" || _system_exit "address is empty"
	[ "$address" = "dhcp" ] || _network_assert_address $address || _system_exit "address error: $address"
	[ -z "$gateway" ] || _network_assert_address $gateway || _system_exit "gateway error: $gateway"

	_network_reset_interface $interface

	wpa_supplicant -B -D$device -i$interface -c$cfg -C$pid
	wpa_cli -i$interface -p$pid list_network | grep -o '[0-9]*' | xargs -i wpa_cli -i$interface -p$pid remove_network {}
	wpa_cli -i$interface -p$pid add_network
	wpa_cli -i$interface -p$pid set_network 0 ssid "\"$ssid\""
	if [ -z "$password" ]
	then
		wpa_cli -i$interface -p$pid set_network 0 key_mgmt NONE
	else
		wpa_cli -i$interface -p$pid set_network 0 psk "\"$password\""
	fi
	wpa_cli -i$interface -p$pid select_network 0
	wpa_cli -i$interface -p$pid enable_network 0

	_network_set_address $interface $address $gateway
}

_main "$@"

